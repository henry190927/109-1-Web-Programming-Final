type Query {
  users: [User!]!
  appmusic(user: String!): [Song!]!
  database(user: String!): [Song!]!
}

type Mutation {
  findOrCreateUser(data: UserInput!): User!
  addSongToDataBase(data: ChangeSongInput!): Song!
  removeSongFromDataBase(data: ChangeSongInput!): Song!
  addAlbumToDataBase(data: ChangeSongInput!): [Song!]!
  # Henry's hard-coded functions
  createServer(data: UserInput!): User!
  createAppMusicServer(data: SongInput!): Song!
  clearAll(user: String!): [User]
  deleteOne(user: String): User
  deleteOneSong(name: String): User
}

type Subscription {
  appmusic: AppMusicSubscriptionPayload!
  addsongtodb: DataBaseSubscriptionPayload!
  removesongfromdb: DataBaseSubscriptionPayload!
  addalbumtodb: DataBaseSubscriptionPayload!
}

enum MutationType {
  LOGIN
  ADDSONGTODB
  REMOVESONGFROMDB
  ADDALBUMTODB
}

input UserInput {
  name: String!
  password: String!
}

input SongInput {
  name: String!
  artist: String!
  album: String!
  artist_image: String!
  album_image: String!
  audio: String!
  time: Int!
}

input ChangeSongInput {
  name: String!
  user: String!
}

type Song {
  name: String!
  artist: String!
  album: String!
  artist_image: String!
  album_image: String!
  audio: String!
  time: Int!
}

type User {
  name: String
  password: String
  appmusic: [Song]
  database: [Song]
  # playlists: Playlist!
}

type AppMusicSubscriptionPayload {
  mutation: MutationType!
  data: User
}

type DataBaseSubscriptionPayload {
  mutation: MutationType!
  data: User
}